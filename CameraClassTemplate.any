/* 
HOW TO USE:

Add `#include "../path/to/CameraClassTemplate.any"`in the beginning
of your main file. Then create the camera class anywhere inside Main:

EXAMPLE:
```
#include "../path/to/CameraClassTemplate.any"

Main = {

VideoLookAtCamera MyCam (
VIDEO_NAME = "MyVideo",  # File name of the video that will be created
UP_DIRECTION = y,        # Orientation of the camera
WIDTH = 1920,            # Width resolution of the video
HEIGHT = 1080,           # Height resolution of the video
SKIP_FRAMES = 10,        # Number of frames to skip when creating the video
VIDEO_OUTPUT = "libxvid",  # The video format created by the FFMPEG tool
VIDEO_INPUT_SCALE = 1    # The ratio between video resolution and input images saved  
                           from anybody. Default is to save images in same resolution as 
                           the output video. It is an advantage to set this to 2 or 4 when 
                           making videos with a low resolution.
) = 
{
   // File name of the video that will be created
   AnyString VideoName = "Cam1";
  
   // The point the camera focus on
   CameraLookAtPoint = Main.MyModel.Femur.r;  
   
   // The vertical field of view in meters
   CameraVerticalFieldOfView = 3;
   
   // The direction which the camera is placed
   // (In global coordinate with respect to the LookAtPoint)
   CameraDirection = {1, 1, -1}

   // The background color used for the video
   SceneBackgroundColor = {1,1,1};
      
   // Determines the speed of the video. Setting it to 
   // nStep/(tEnd-tStart) will make the video run in real time. 
   VideoInputFrameRate = 10;
   

  
  #var AnyInt VideoWidth = 1920;
  
  #var AnyInt VideoHeight = 1080;
  
  #var AnyVar VideoInputScale = 1; 
  
  #var AnyString VideoCodec = "libxvid";
  
  #var AnyInt VideoStartFrame = 0; 
   
   
   // The output path where the video is saved (Defaults to the main file directory)
   AnyFileVar OutputPath = _CAMERA_MAIN_FILE_DIRECTORY_;
   
   
   // The operations which should be included in the video.
   Analysis = {
       AnyOperation &ref = Main.MyStudy.InverseDynamics;
   };
};
```

# TO CREATE A VIDEO RUN THE FOLLOWING OPERATION:
    Main.MyCam.Create_Video 

*/

#define _CAMERA_MAIN_FILE_DIRECTORY_ ANYBODY_PATH_MAINFILEDIR

#class_template VideoLookAtCamera ( 
  UP_DIRECTION = y,
  OVER_WRITE = 1,
  _DEBUG = 0,
  _CLEAN_UP_IMAGES = 1
  ) 
{
    
  /// File name of the video that will be created
  #var AnyString VideoName = "Cam1";
  
  /// Width of the video in pixels
  #var AnyInt VideoWidth = 1920;
  
  /// Height of the video in pixels
  #var AnyInt VideoHeight = 1080;
  
  /// The ratio between video resolution and input images saved  
  /// from anybody. Default is to save images in same resolution as 
  /// the output video. It is an advantage to set this to 2 or 4 when 
  /// making videos with a low resolution
  #var AnyVar VideoInputScale = 1; 
  
  /// The video codec ffmepg will use to create the video. 
  /// Choose "libxvid" for best for compatibility (eg. with PowerPoint)
  /// or "libx264" for best performance
  #var AnyString VideoCodec = "libxvid";
  
  /// This is the start frame used when creating Videos. This can be used to 
  /// for skipping some of the initial frames. 
  #var AnyInt VideoStartFrame = 0; 

  
  /// The path to the ffmpeg binary. 
  #var AnyFileVar VideoPathFFMPEG = "ffmpeg.exe";
  
  /// Video BitRate in KiloByte
  #var AnyInt VideoBitRate = 8000;
  
  /// Determines the speed of the video. Setting it to 
  /// nStep/(tEnd-tStart) make the video run in real time. 
  #var AnyIntVar VideoInputFrameRate = 30; 

  
  /// The output path where the video is saved 
  #var AnyStringVar OutputPath = _CAMERA_MAIN_FILE_DIRECTORY_;
  
  /// The point the camera focus on
  #var AnyVec3 CameraLookAtPoint = DesignVar({0,1,0});
  
  
  #var AnyVar CameraDistance = DesignVar(10);
  
  /// The vertical field of view in meters at the LookAtPoint
  #var AnyVar CameraFieldOfView = DesignVar(2);
  
  /// The direction which the camera is placed
  /// (In global coordinate with respect to the LookAtPoint)
  #var AnyVec3 CameraDirection = DesignVar({1, 0, 0});
  
  // The following is AnyScript Magic ;) 
  // Covert the x/y/z Enum from UP_DIRECTION to a {1,0,0}/{0,1,0}/{0,0,1} vector
  /// The updirection of the camera as a vector. This is set by the UP_DIRECTION 
  /// can be overwritten.  
  #var AnyVec3 CameraUpDirection= DesignVar({{1,0,0},{0,1,0},{0,0,1}}[round(sum({-0.5,0,0.5}*RotMat(pi, UP_DIRECTION ))+1)]);
  
  /// The background color used for the video
  #var AnyVec3 BackgroundColor = DesignVar({1,1,1});
    
    
  /// Counter for numbering the saved images. This defaults to the 
  /// camera class builtin counter. 
  #var AnyInt Counter = Camera.Recorder.Counter;
    
  AnyOperationSequence Preview =  
  {
    AnyFileVar preview_file = .OutputPath +"/" + .VideoName + "_Camera_Preview.png";  
    AnyOperationSetValue SetFilename= 
    {
      Source = {&.preview_file}; 
      Target = {&..Camera.Recorder.FileName};
    };
    AnyOperation &StartTrigger = .Camera.Recorder.TriggerOn;
    AnyOperationShellExec OpenPreview = 
    {
      FileName = "cmd.exe"; 
      #if _DEBUG
      AnyStringVar CmdOpt = "/K TITLE Open Preview&&";
      #else
      AnyStringVar CmdOpt = "/C ";
      #endif
      #var Arguments = CmdOpt +"call "+ strquote(FilePathCompleteOf(.preview_file));
      #var Show = _DEBUG;
      Wait = _DEBUG;
    };
    AnyOperation &StopTrigger = .Camera.Recorder.TriggerOff;
    AnyOperationMacro ResetFilename = 
    {
      MacroStr = {"classoperation "+CompleteNameOf(..Camera.Recorder.F)+"ileName "+strquote("Reset Value")};
    };
  };
  
  AnyOperationSequence Create_Video =  
  {
    AnyOperationSequence PreProcessing = 
    {
      AnyOperationSequence ToogleReset = 
      {
        AnyOperation &reset_on = ...Camera.Recorder.ResetTriggerOn; 
        AnyOperation &reset_off = ...Camera.Recorder.ResetTriggerOff; 
      };
      AnyOperation &StartTrigger = ..Camera.Recorder.TriggerOn;
    };
    AnyOperation &Operation = .Analysis;
    AnyOperationSequence PostProcessing = 
    {
      AnyOperation &StopTrigger = ..Camera.Recorder.TriggerOff;
      AnyOperation &CreateVideo = ..Camera.Recorder.ConvertVideo;
      #if  _CLEAN_UP_IMAGES == 1
      AnyOperation &Cleanup= ..Camera.Recorder.RemoveImageFiles;
      #endif
    };
    AnyOperationShellExec PlayVideo = 
    {
      FileName = "cmd.exe"; 
      #if _DEBUG
      AnyStringVar CmdOpt = "/K TITLE Play Video&&";
      #else
      AnyStringVar CmdOpt = "/C ";
      #endif
      
      #var Arguments = CmdOpt + "call "+ strquote(FilePathCompleteOf(..Camera.Recorder.ConvertVideo.out_file));
      #var Show =  _DEBUG;
      Wait = _DEBUG;
    };
  };
  
  
  AnyCameraLookAt Camera = {
    
    #var Perspective = DesignVar(Off);
    #var EyePoint = .CameraLookAtPoint + .CameraDistance *.CameraDirection;
    
    #var LookAtPoint = .CameraLookAtPoint;
    
    #var UpPoint = DesignVar(EyePoint + 100*.CameraUpDirection);
    
    #var FocalDist = .CameraDistance;
    #var FocalHeight = .CameraFieldOfView;
    
    AnyScene Scene  = 
    {
      BackgroundColor = ..BackgroundColor;
    };

    
    AnyCamRecorder Recorder = {  
      AnyStringVar F = ""; //< Dummy variable used to get the full name of Recorder.FileName. Do not delete it. 
      #var AnyString CounterFormat = "%04d";
      #var pxWidth = round(..VideoWidth * ..VideoInputScale*1.0);
      #var pxHeight = round(..VideoHeight * ..VideoInputScale*1.0);
      #var Trig = DesignVar(Off);
      #var ResetTrig = DesignVar(Off);
      #var AntiAlias = 16;
      
      FileName = ..OutputPath + "/"+ ..VideoName + "_" + strval(..Counter , CounterFormat)+ ".png";

      
      AnySwitchVar Offsetting = Off;  
      AnySwitchVar OnSetting = On;  
      
      AnyOperationSetValue TriggerOff = 
      {
        Source = { &.Offsetting}; 
        Target = {&.Trig};
      };
      AnyOperationSetValue TriggerOn = 
      {
        Source = {&.OnSetting}; 
        Target = {&.Trig};
      };
      AnyOperationSetValue ResetTriggerOff = 
      {
        Source = { &.Offsetting}; 
        Target = {&.ResetTrig};
      };
      AnyOperationSetValue ResetTriggerOn = 
      {
        Source = {&.OnSetting}; 
        Target = {&.ResetTrig};
      };
      
      AnyOperationShellExec ConvertVideo = 
      {
        #var FileName = "cmd.exe";
        #var AnyStringVar inputfile = ...VideoName + "_" + .CounterFormat +".png";
        
        #var AnyFileVar out_file = ...OutputPath + "/"+ ...VideoName + ".mp4";
        
        
        #if _DEBUG
        AnyStringVar CmdOpt = "/K TITLE Creating Video&&";
        #else
        AnyStringVar CmdOpt = "/C ";
        #endif
        AnyFloat InputOutputScale = ...VideoInputScale;
                
        #var Arguments = CmdOpt +
        "call "+strquote(FilePathCompleteOf(...VideoPathFFMPEG)) +
        iffun(OVER_WRITE, " -y","") +
        " -r " + strval(...VideoInputFrameRate) +
        " -start_number " + strval(...VideoStartFrame,.CounterFormat) +
        " -i "+strquote(inputfile) +
        " -c:v "+ ...VideoCodec +
        " -b:v 8000k"+
        " -vf "+ strquote("fps=30,format=yuv420p")+
        " -vf "+ strquote("scale=trunc(iw/(2*"+strval(InputOutputScale,"%g" )+"))*2:trunc(ih/(2*"+strval(InputOutputScale,"%g" )+"))*2")+
        " -metadata author="+strquote("AnyBodyTechnology")+" " +
        strquote(FilePathCompleteOf(out_file));
        
        #var WorkDir = ...OutputPath;
        #var Show = _DEBUG;
      };  
      AnyOperationSequence RemoveImageFiles = 
      {
        AnyOperationShellExec DeleteOperation = 
        {
          #if _DEBUG
          AnyStringVar CmdOpt = "/K TITLE Removing Images&&";
          #else
          AnyStringVar CmdOpt = "/C ";
          #endif
          
          #var FileName = "cmd.exe";
          #var  Arguments = CmdOpt + "del " + strquote(....VideoName+ "_" + "*.png");
          
          #var WorkDir = ....OutputPath;
          #var Show = _DEBUG;
          Wait = _DEBUG;
        };   
      };
    };
    
    AnyOperationSequence Save_Settings= {
      
      AnyOperationSetValue TouchSettings = 
      {
        Source =
        {
          &...CameraLookAtPoint,
          &...CameraDistance, 
          &...CameraFieldOfView, 
          &...CameraDirection,
          &...CameraUpDirection, 
          &...BackgroundColor,
          &...CameraUpDirection
        };
        Target = Source;  
      };
      AnyOperationMacro SaveValues = 
      {
        MacroStr = {"classoperation Main "+strquote("Save Values")+ " --file=" + strquote(...VideoName+"_Camera_Settings.anyset") };
      };
    };
    AnyOperationMacro Load_Settings  = 
    {
      MacroStr = {"classoperation Main "+strquote("Load Values")+ " --file=" + strquote(..VideoName+"_Camera_Settings.anyset") };
    };  
    
    
    
  };
  
  
  
  
  AnyOperationSequence Analysis = 
  {
    AnyOperationDummy no_op = {};
  };  
};